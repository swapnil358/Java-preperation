Queries based on the above tables: https://docs.google.com/document/d/1UpuVk58lB3UTtVgkUt2h9LK9rdgkiaIj/edit

Simple Queries:

  List all the employee details:
  SQL > Select * from employee;

  List all the department details:
  SQL > Select DEPARTMENT_ID from Employee;

  List all job details:
  SQL > Select JOB_ID from Employee;

  List all the locations:
  SQL > Select loc from Employee;

  List the latest updated record:
  SELECT TOP 1 * FROM Employee ORDER BY EMPLOYEE_ID DESC

  SELECT TOP 1 * FROM Employee ORDER BY HIREDATE DESC

  select * from Employee where HIREDATE=(select max(HIREDATE) from Employee)

  List out first name, last name, salary, commission for all employees:
  SQL > Select first_name, last_name, salary, commission from employee;

  List out employee_id,last name,department id for all  employees and rename employee id as “ID  of the employee”,-:
  last name as “Name of the employee”, department id as  “department  ID”:
  SQL > Select employee_id “id of the employee”, last_name “name", department id as “department id” from employee;

  List out the employees anual salary with their names only.:
  SQL > Select last_name, salary*12 “annual salary” from employee


Where Conditions:

  List the details about “SMITH”:
  SQL > Select * from employee where last_name=’SMITH’;

  List out the employees who are working in department 20:
  SQL > Select * from employee where department_id=20

  List out the employees who are earning salary between 3000 and 4500:
  SQL > Select * from employee where salary between 3000 and 4500

  List out the employees who are working in department 10 or 20:
  SQL > Select * from employee where department_id in (20,30)

  Find out the employees who are not working in department 10 or 30:
  SQL > Select last_name, salary, commission, department_id from employee where department_id not in (10,30)

  List out the employees whose name starts with “S”:
  SQL > Select * from employee where last_name like ‘S%’

  List out the employees whose name starts with lower case s:
  SELECT * FROM employee WHERE LOWER(last_name) LIKE 's%';

  List out the employees whose name starts with upper case s:
To list out the employees whose names start with an uppercase 'S', you can use the SQL query with the SUBSTRING() or LEFT() function to extract the first character of the last_name column and then compare it to 'S'. Here's the query using the SUBSTRING() function:

  SELECT * FROM employee WHERE SUBSTRING(last_name, 1, 1) = 'S';
Or you can use the LEFT() function:
  SELECT * FROM employee WHERE LEFT(last_name, 1) = 'S';
  Both queries will retrieve all the rows from the "employee" table where the first letter of the "last_name" column is an uppercase 'S'. These queries are case-sensitive, so only names starting with an uppercase 'S' will be included in the results.



  List out the employees whose name start with “S” and end with “H”:
  SQL > Select * from employee where last_name like ‘S%H’

  List out the employees whose name length is 4 and start with “S”:
  SQL > Select * from employee where last_name like ‘S___’

  List out the employees who are working in department 10 and draw the salaries more than 3500:
  SQL > Select * from employee where department_id=10 and salary>3500

  list out the employees who are not receiving commission.:
  SQL > Select * from employee where commission is Null

Order By Clause:

  List out the employee id, last name in ascending order based on the employee id.:
  SQL > Select employee_id, last_name from employee order by employee_id

  List out the employee id, name in descending order based on salary column:
  SQL > Select employee_id, last_name, salary from employee order by salary desc

  list out the employee details according to their last_name in ascending order and salaries in descending order:
  SQL > Select employee_id, last_name, salary from employee order by last_name, salary desc

  list out the employee details according to their last_name in ascending order and then on department_id in descending order.:
  SQL > Select employee_id, last_name, salary from employee order by last_name, department_id desc


Group By & Having Clause:

  Count the employees different departments wise:
  SQL > Select department_id, count(*), from employee group by department_id


  List out the department wise maximum salary, minimum salary, average salary of the employees:
  SQL > Select department_id, count(*), max(salary), min(salary), avg(salary) from employee group by department_id

  List out the job wise maximum salary, minimum salary, average salaries of the employees.:
  SQL > Select job_id, count(*), max(salary), min(salary), avg(salary) from employee group by job_id


  List out the no.of employees joined in every month in ascending order.:
  SQL > Select to_char(hire_date,’month’)month, count(*) from employee group by to_char(hire_date,’month’) order by month

  List out the no.of employees for each month and year, in the ascending order based on the year, month.:
  SQL > Select to_char(hire_date,’yyyy’) Year, to_char(hire_date,’mon’) Month, count(*) “No. of employees” from employee group by to_char(hire_date,’yyyy’), to_char(hire_date,’mon’)

  List out the department id having atleast four employees.:
  SQL > Select department_id, count(*) from employee group by department_id having count(*)>=4

  How many employees in January month.:
  SQL > Select to_char(hire_date,’mon’) month, count(*) from employee group by to_char(hire_date,’mon’) having to_char(hire_date,’mon’)=’jan’

  How many employees who are joined in January or September month.:
  SQL > Select to_char(hire_date,’mon’) month, count(*) from employee group by to_char(hire_date,’mon’) having to_char(hire_date,’mon’) in (‘jan’,’sep’)

  How many employees who are joined in 1985.:
  SQL > Select to_char(hire_date,’yyyy’) Year, count(*) from employee group by to_char(hire_date,’yyyy’) having to_char(hire_date,’yyyy’)=1985

  How many employees joined each month in 1985.:
  SQL > Select to_char(hire_date,’yyyy’)Year, to_char(hire_date,’mon’) Month, count(*) “No. of employees” from employee where to_char(hire_date,’yyyy’)=1985 group by to_char(hire_date,’yyyy’),to_char(hire_date,’mon’)

  How many employees who are joined in March 1985.:
  SQL > Select to_char(hire_date,’yyyy’)Year, to_char(hire_date,’mon’) Month, count(*) “No. of employees” from employee where to_char(hire_date,’yyyy’)=1985 and to_char(hire_date,’mon’)=’mar’ group by to_char(hire_date,’yyyy’),to_char(hire_date,’mon’)

  Which is the department id, having greater than or equal to 3 employees joined in April 1985.:
  SQL > Select department_id, count(*) “No. of employees” from employee where to_char(hire_date,’yyyy’)=1985 and to_char(hire_date,’mon’)=’apr’ group by to_char(hire_date,’yyyy’), to_char(hire_date,’mon’), department_id having count(*)>=3


  Sub-Queries

  Display the employee who got the maximum salary.:
  SQL > Select * from employee where salary=(select max(salary) from employee)

  Display the employees who are working in Sales department:
  SQL > Select * from employee where department_id IN (select department_id from department where name=’SALES’)

  Display the employees who are working as “Clerk”.:
  SQL > Select * from employee where job_id in (select job_id from job where function=’CLERK’

  Display the employees who are working in “New York”:
  SQL > Select * from employee where department_id=(select department_id from department where location_id=(select location_id from location where regional_group=’New York’))

  Find out no.of employees working in “Sales” department.:
  SQL > Select * from employee where department_id=(select department_id from department where name=’SALES’ group by department_id)

  Update the employees salaries, who are working as Clerk on the basis of 10%.:
  SQL > Update employee set salary=salary*10/100 where job_id=(select job_id from job where function=’CLERK’)

  Delete the employees who are working in accounting department.:
  SQL > delete from employee where department_id=(select department_id from department where name=’ACCOUNTING’)

  Display the second highest salary drawing employee details.:
  SQL > Select * from employee where salary=(select max(salary) from employee where salary <(select max(salary) from employee))

  Display the Nth highest salary drawing employee details:
  SQL > Select distinct e.salary from employee where & no-1=(select count(distinct salary) from employee where sal>e.salary)


Sub-Query operators: (ALL,ANY,SOME,EXISTS)

  List out the employees who earn more than every employee in department 30.:
  SQL > Select * from employee where salary > all (Select salary from employee where department_id=30)

  List out the employees who earn more than the lowest salary in department 30.:
  SQL > Select * from employee where salary > any (Select salary from employee where department_id=30)

  Find out whose department has not employees.:
  SQL > Select employee_id, last_name, department_id from employee e where not exists (select department_id from department d where d.department_id=e.department_id)

  Find out which department does not have any employees.:
  SQL > Select name from department d where not exists (select last_name from employee e where d.department_id=e.department_id)



Co-Related Sub Queries:

  47.Find out the employees who earn greater than the average salary for their department.:
  SQL > Select employee_id, last_name, salary, department_id from employee e where salary > (select avg(salary) from employee where department_id=e.department_id)


  Joins
  Q15. List the different type of joins?:
There are various types of joins which are used to retrieve data between the tables. There are four types of joins, namely:


Inner join: Inner Join in MySQL is the most common type of join.
  It is used to return all the rows from multiple tables where the join condition is satisfied.
Left Join:  Left Join in MySQL is used to return all the rows from the left table
  but only the matching rows from the right table where the join condition is fulfilled.
Right Join: Right Join in MySQL is used to return all the rows from the right table
  but only the matching rows from the left table where the join condition is fulfilled.
Full Join: Full join returns all the records when there is a match in any of the tables.
  Therefore, it returns all the rows from the left-hand side table and all the rows from the right-hand side table.

  Simple join

  48.List out employees with their department names:
  SQL > Select employee_id, last_name, name from employee e, department d where e.department_id=d.department_id


  49.Display employees with their designations (jobs):
  SQL > Select employee_id, last_name, function from employee e, job j where e.job_id=j.job_id

  50.Display the employees with their department name and regional groups.:
  SQL > Select employee_id, last_name, name, regional_group from employee e, department d, location l where e.department_id=d.department_id and d.location_id=l.location_id

  51.How many employees who are working in different departments and display with department name.:
  SQL > Select name, count(*) from employee e, department d where d.department_id=e.department_id group by name

  52.How many employees who are working in sales department.:
  SQL > Select name, count(*) from employee e, department d where d.department_id=e.department_id group by name having name=’SALES’

  53.Which is the department having greater than or equal to 5 employees and display the department names in ascending order.:
  SQL > Select name, count(*) from employee e, department d where d.department_id=e.department_id group by name having count (*)>=5 order by name

  54.How many jobs in the organization with designations.:
  SQL > Select function, count(*) from employee e, job j where j.job_id=e.job_id group by function

  55.How many employees working in “New York”.:
  SQL > Select regional_group, count(*) from employee e, department d, location l where e.department_id=d.department_id and d.location_id=l.location_id and regional_group=’NEW YORK’ group by regional_group


Non – Equi Join:

  56.Display employee details with salary grades.:
  SQL > Select employee_id, last_name, grade_id from employee e, salary_grade s where salary between lower_bound and upper_bound order by last_name

  57.List out the no. of employees on grade wise.:
  SQL > Select grade_id, count(*) from employee e, salary_grade s where salary between lower_bound and upper_bound group by grade_id order by grade_id desc

  58.Display the employee salary grades and no. of employees between 2000 to 5000 range of salary.:
  SQL > Select grade_id, count(*) from employee e, salary_grade s where salary between lower_bound and upper_bound and lower_bound>=2000 and lower_bound<=5000 group by grade_id order by grade_id desc

Self Join:

  59.Display the employee details with their manager names.:
  SQL > Select e.last_name emp_name, m.last_name, mgr_name from employee e, employee m where e.manager_id=m.employee_id

  60.Display the employee details who earn more than their managers salaries.:
  SQL > Select e.last_name emp_name, e.salary emp_salary, m.last_name, mgr_name, m.salary mgr_salary from employee e, employee m where e.manager_id=m.employee_id and m.salary

  61.Show the no. of employees working under every manager.:
  SQL > Select m.manager_id, count(*) from employee e, employee m where e.employee_id=m.manager_id group by m.manager_id


Outer Join:

  62. Display employee details with all departments.:
  SQL > Select last_name, d.department_id, d.name from employee e, department d where e.department_id(+)=d.department_id

  63.Display all employees in sales or operation departments.:
  SQL > Select last_name, d.department_id, d.name from employee e, department d where e.department_id(+)=d.department_id and d.department_idin (select department_id from department where name IN (‘SALES’,’OPERATIONS’))



Set Operators:

  64.List out the distinct jobs in Sales and Accounting Departments.:
  SQL > Select function from job where job_id in (Select job_id from employee where department_id=(select department_id from department where name=’SALES’)) union Select function from job where job_id in (Select job_id from employee where department_id=(select department_id from department where name=’ACCOUNTING’))


  65.List out the ALL jobs in Sales and Accounting Departments.:
  SQL > Select function from job where job_id in (Select job_id from employee where department_id=(select department_id from department where name=’SALES’)) union all Select function from job where job_id in (Select job_id from employee where department_id=(select department_id from department where name=’ACCOUNTING’))

  66.List out the common jobs in Research and Accounting Departments in ascending order.:
  SQL > Select function from job where job_id in (Select job_id from employee where department_id=(select department_id from department where name=’RESEARCH’)) intersect Select function from job where job_id in (Select job_id from employee where department_id=(select department_id from department where name=’ACCOUNTING’)) order by function







  Answers

  SQL > Select * from employee;
  SQL > Select * from department;
  SQL > Select * from job;
  SQL > Select * from loc;
  SQL > Select first_name, last_name, salary, commission from employee;
  SQL > Select employee_id “id of the employee”, last_name “name", department id as “department id” from employee;
  SQL > Select last_name, salary*12 “annual salary” from employee
  SQL > Select * from employee where last_name=’SMITH’;
  SQL > Select * from employee where department_id=20
  SQL > Select * from employee where salary between 3000 and 4500
  SQL > Select * from employee where department_id in (20,30)
  SQL > Select last_name, salary, commission, department_id from employee where department_id not in (10,30)
  SQL > Select * from employee where last_name like ‘S%’
  SQL > Select * from employee where last_name like ‘S%H’
  SQL > Select * from employee where last_name like ‘S___’
  SQL > Select * from employee where department_id=10 and salary>3500
  SQL > Select * from employee where commission is Null
  SQL > Select employee_id, last_name from employee order by employee_id
  SQL > Select employee_id, last_name, salary from employee order by salary desc
  SQL > Select employee_id, last_name, salary from employee order by last_name, salary desc
  SQL > Select employee_id, last_name, salary from employee order by last_name, department_id desc
  SQL > Select department_id, count(*), from employee group by department_id
  SQL > Select department_id, count(*), max(salary), min(salary), avg(salary) from employee group by department_id
  SQL > Select job_id, count(*), max(salary), min(salary), avg(salary) from employee group by job_id
  SQL > Select to_char(hire_date,’month’)month, count(*) from employee group by to_char(hire_date,’month’) order by month
  SQL > Select to_char(hire_date,’yyyy’) Year, to_char(hire_date,’mon’) Month, count(*) “No. of employees” from employee group by to_char(hire_date,’yyyy’), to_char(hire_date,’mon’)
  SQL > Select department_id, count(*) from employee group by department_id having count(*)>=4
  SQL > Select to_char(hire_date,’mon’) month, count(*) from employee group by to_char(hire_date,’mon’) having to_char(hire_date,’mon’)=’jan’
  SQL > Select to_char(hire_date,’mon’) month, count(*) from employee group by to_char(hire_date,’mon’) having to_char(hire_date,’mon’) in (‘jan’,’sep’)
  SQL > Select to_char(hire_date,’yyyy’) Year, count(*) from employee group by to_char(hire_date,’yyyy’) having to_char(hire_date,’yyyy’)=1985
  SQL > Select to_char(hire_date,’yyyy’)Year, to_char(hire_date,’mon’) Month, count(*) “No. of employees” from employee where to_char(hire_date,’yyyy’)=1985 group by to_char(hire_date,’yyyy’),to_char(hire_date,’mon’)
  SQL > Select to_char(hire_date,’yyyy’)Year, to_char(hire_date,’mon’) Month, count(*) “No. of employees” from employee where to_char(hire_date,’yyyy’)=1985 and to_char(hire_date,’mon’)=’mar’ group by to_char(hire_date,’yyyy’),to_char(hire_date,’mon’)
  SQL > Select department_id, count(*) “No. of employees” from employee where to_char(hire_date,’yyyy’)=1985 and to_char(hire_date,’mon’)=’apr’ group by to_char(hire_date,’yyyy’), to_char(hire_date,’mon’), department_id having count(*)>=3
  SQL > Select * from employee where salary=(select max(salary) from employee)
  SQL > Select * from employee where department_id IN (select department_id from department where name=’SALES’)
  SQL > Select * from employee where job_id in (select job_id from job where function=’CLERK’
  SQL > Select * from employee where department_id=(select department_id from department where location_id=(select location_id from location where regional_group=’New York’))
  SQL > Select * from employee where department_id=(select department_id from department where name=’SALES’ group by department_id)
  SQL > Update employee set salary=salary*10/100 wehre job_id=(select job_id from job where function=’CLERK’)
  SQL > delete from employee where department_id=(select department_id from department where name=’ACCOUNTING’)
  SQL > Select * from employee where salary=(select max(salary) from employee where salary <(select max(salary) from employee))
  SQL > Select distinct e.salary from employee where & no-1=(select count(distinct salary) from employee where sal>e.salary)
  SQL > Select * from employee where salary > all (Select salary from employee where department_id=30)
  SQL > Select * from employee where salary > any (Select salary from employee where department_id=30)
  SQL > Select employee_id, last_name, department_id from employee e where not exists (select department_id from department d where d.department_id=e.department_id)
  SQL > Select name from department d where not exists (select last_name from employee e where d.department_id=e.department_id)
  SQL > Select employee_id, last_name, salary, department_id from employee e where salary > (select avg(salary) from employee where department_id=e.department_id)
  SQL > Select employee_id, last_name, name from employee e, department d where e.department_id=d.department_id
  SQL > Select employee_id, last_name, function from employee e, job j where e.job_id=j.job_id
  SQL > Select employee_id, last_name, name, regional_group from employee e, department d, location l where e.department_id=d.department_id and d.location_id=l.location_id
  SQL > Select name, count(*) from employee e, department d where d.department_id=e.department_id group by name
  SQL > Select name, count(*) from employee e, department d where d.department_id=e.department_id group by name having name=’SALES’
  SQL > Select name, count(*) from employee e, department d where d.department_id=e.department_id group by name having count (*)>=5 order by name
  SQL > Select function, count(*) from employee e, job j where j.job_id=e.job_id group by function
  SQL > Select regional_group, count(*) from employee e, department d, location l where e.department_id=d.department_id and d.location_id=l.location_id and regional_group=’NEW YORK’ group by regional_group
  SQL > Select employee_id, last_name, grade_id from employee e, salary_grade s where salary between lower_bound and upper_bound order by last_name
  SQL > Select grade_id, count(*) from employee e, salary_grade s where salary between lower_bound and upper_bound group by grade_id order by grade_id desc
  SQL > Select grade_id, count(*) from employee e, salary_grade s where salary between lower_bound and upper_bound and lower_bound>=2000 and lower_bound<=5000 group by grade_id order by grade_id desc
  SQL > Select e.last_name emp_name, m.last_name, mgr_name from employee e, employee m where e.manager_id=m.employee_id
  SQL > Select e.last_name emp_name, e.salary emp_salary, m.last_name, mgr_name, m.salary mgr_salary from employee e, employee m where e.manager_id=m.employee_id and m.salary
  SQL > Select m.manager_id, count(*) from employee e, employee m where e.employee_id=m.manager_id group by m.manager_id
  SQL > Select last_name, d.department_id, d.name from employee e, department d where e.department_id(+)=d.department_id
  SQL > Select last_name, d.department_id, d.name from employee e, department d where e.department_id(+)=d.department_id and d.department_idin (select department_id from department where name IN (‘SALES’,’OPERATIONS’))
  SQL > Select function from job where job_id in (Select job_id from employee where department_id=(select department_id from department where name=’SALES’)) union Select function from job where job_id in (Select job_id from employee where department_id=(select department_id from department where name=’ACCOUNTING’))
  SQL > Select function from job where job_id in (Select job_id from employee where department_id=(select department_id from department where name=’SALES’)) union all Select function from job where job_id in (Select job_id from employee where department_id=(select department_id from department where name=’ACCOUNTING’))
  SQL > Select function from job where job_id in (Select job_id from employee where department_id=(select department_id from department where name=’RESEARCH’)) intersect Select function from job where job_id in (Select job_id from employee where department_id=(select department_id from department where name=’ACCOUNTING’)) order by function







  1. What are the different types of SQL commands? Can you explain those commands?:
  DDDL— Data Definition Language (CREATE, ALTER, DROP, TRUNCATE, COMMENT, RENAME)
  DML— Data Manipulation Language (SELECT, INSERT, UPDATE, DELETE, MERGE)
  DDCL— Data Control Language (GRANT, REVOKE)
  TCL — Transaction Control Language (COMMIT, ROLLBACK, SAVEPOINT)

  2. What is an Index in SQL?:
  An index is performance-tuning method of allowing faster retrieval of records from the table.
  An index creates an entry for each value, and it will be faster to retrieve data.
  Syntax
  CREATE INDEX index_name ON table_name;
  DROP INDEX index_name ON table_name;




  4. What is a VIEW in SQL?:
  A view is a virtual table, which consists of a subset of data contained in a table.
  View can be create on one or many tables

  CREATE VIEW view name AS SELECT columnl, column2.....
  FROM table _ name WHERE [condition];

  Advantage:
  It does not occupy Space
  It used to retry the result of complex queries that executes often
  It restricting data access



  5. What is a Normalization?:
  NORMALIZATION is a database design technique that reduces data redundancy and eliminates Undesirable characteristics like Insertion, Update and Deletion Anomalies.

  Normalization rule divides larger table into smaller table and links them using relationship
  Purpose of normalization in SQL is eliminate redundant or repetitive data and ensure that data is sorted logically

  Database normalization process is divides into following categories

  First Normal Form (INF)
  Second Normal Form (2NF)
  Third Normal Form (3NF)
  Boyce-Codd Normal Form (BCNF)
  Fourth Normal Form (4NF)
  Fifth Normal Form (5NF)
  6NF (Sixth Normal Form)



  6. What is a Primary Key in SQL?:
  A primary key is a field in a table, which uniquely identifies each row/record in a database table.
  Primary keys must contain unique values.
  A primary key column cannot have NULL values.
  A table can have only one primary key
  A table cannot accept duplicate record


  CREATE TABLE EMPLOYEE (EMPID INT, NAME VARCHAR (20), AGE INT, ADDRESS CHAR (25), SALARY DECIMAL (18, 2), PRIMARY KEY (EMPID));



  7. What is a Foreign Key in SQL ?:
  A foreign key is a key used to link two tables together.
  A foreign key in one table used to point primary key in another table.


  CREATE TABLE EMPLOYEE(
  EMP_ID NOT NULL,
  NAME VARCHAR (20) NOT NULL,
  AGE INT NOT NULL,
  ADDRESS CHAR (25),
  SALARY DECIMAL (18, 2),
  PRIMARY KEY (EMP_ID)
  );


  CREATE TABLE COMPANY(
  COMPANY ID INT NOT NULL,
  COMPANY_NAME VARCHAR (20) NOT NULL,
  COMPANY_DOMAIN VARCHAR (20) NOT NULL,
  COMPANY _ ADDRESS CHAR (25) ,
  EMPLOYEE_ID INT references EMPLOYEE(EMP_ID)
  PRIMARY KEY (COMPANY_ID)
  );


  8. What is a Query?:
   A database query is a request for data or information from a database table or
  Combination of tables.
   A database query can be either a select query or an action query.


  9. What is a Sub-query?:
   A Subquery is a SQL query within another query.
  It is a subset of a Select statement whose return values are used in filtering the
  Conditions of the main query.



  10. What is a Stored procedure ?:
  A Stored Procedure is a collection of SQL statements that have been created and stored in the
  database to perform a particular task.


  11. What is a Trigger?:
  A DB trigger is a code or programs that automatically execute with response to some event on a table or view in a database.
  It helps to maintain the integrity of the database.


  12. Explain Distinct in SQL with example?:
  DISTINCT is used with the SELECT statement.
  If the records contain duplicate values, then DISTINCT is used to select different values among duplicate records.
Syntax:
  SELECT DISTINCT column_name(s) FROM table _ name;
  SELECT DISTINCT emp_no FROM Employee;



  13. What are SQL constraints?:
  Constraints are the rules that we can apply on the type of data in a table.
  We can specify the limit on the type of data that can be stored in a particular column in a table using constraints.
  NOT NULL - if specify we cannot insert null value
  UNIQUE – If specify all values must be unique (values cannot be duplicate)
  PRIMARY KEY – If specify - it
  FOREIGN KEY – It is fields, which can uniquely identify each row on another table.
  CHECK – It helps to validate values of column to meet a particular condition. It ensure the values in column meets a condition.
  DEFAULT – Specify the default values in column. If we forget to insert values, it should take default specified value.



  14. What is the difference between Delete, Truncate and Drop command?:
  ➢Delete command is a DML command; it is used to delete rows from a table. It can be rolled back.
  ➢Truncate is a DDL command, it is used to delete all the rows from the table and free the space containing the table. It cannot be rolled back.
  ➢Drop is a DDL command, it removes the complete data along with the table structure (unlike truncate command that removes only the rows). All the tables' rows, indexes, and privileges will also be removed.


  15. What is a Join and What are the different types at joins!:
  Join is used to combine data or rows from two or more tables based on a common field between them.
  INNER JOIN
  LEFT JOIN
  RIGHT JOIN
  FULL JOIN



  Write Max salary from each department:
  Select max(SALARY) from employee group by department


  Select Distinct employee name whose salary between 3000 to 3500:
  Select DISTINCT(firstName) from employee where SALARY between 3000 AND 3500


  Write a query to find employee whose salary is is equal or greater than 40000?:
  Select * from employee where SALARY>=40000


  Write a Query to find a name of employee whose name start with ‘S’;:
  Select * from employee where firstName like ‘S%’


  Write a query to find maximum salary for a lady employee:
  Select * from employee where SALARY IN(select MAX(SALARY) from employee where GENDER=’FEMALE’)


  Write a query to find 3rd highest salary:
  Select Top 1 SALARY as ‘3rd highest salary’ from(select Top 3 salary from employee ORDER BY SALARY DESC) ORDER BY ASC


  Write a query to get 3rd lowest salary:
  Select Top 1 SALARY as ‘3rd lowest salary’ from (Select DISTINCT Top 3 SALARY from employee ORDER BY SALARY ASC) ORDER BY SALARY DESC


  Write a query to update salary of an employee Yashika to 34000:
  Update employee SET SALARY=34000 where FIRSTNAME = ‘Yashika’ and LASTNAME = ‘Reddy’


  Write a query to delete employee details named Deepak:
  Delete from employee where FIRSTNAME = ‘deepak’;

  Write a query to fetch all details from both Employee and Company details:
  Select * from employee, Company WHERE employee.EMP_ID=Company.Employee_Id


  Write a query inner join on Employee and Company details:
  Select * from employee INNER JOIN Company ON employee.EMP_ID=Company.Employee_Id

  Write a query Outer join on Employee and Company details:
  Select * from employee FULL JOIN Company ON employee.EMP_ID=Company.Employee_Id

  Write a query to fetch company name of the lady employee who is getting highest salary?:
  Select cmp.COMPANY_NAME From employee emp FULL JOIN Company cmp ON emp.EMP_ID=cmp.Employee_Id
  WHERE emp.SALARY IN(SELECT MAX(SALARY) from employee where gender=’Female’);

  Write a query to Create a table and drop same table?:
  DROP table employee

  Count the employees different departments wise:
  Select department_id, count(*), from employee group by department_id

